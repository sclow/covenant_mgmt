# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Grunt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'original_server_guid': 'str',
        'guid': 'str',
        'children': 'list[str]',
        'implant_template_id': 'int',
        'implant_template': 'ImplantTemplate',
        'validate_cert': 'bool',
        'use_cert_pinning': 'bool',
        'smb_pipe_name': 'str',
        'listener_id': 'int',
        'listener': 'Listener',
        'note': 'str',
        'delay': 'int',
        'jitter_percent': 'int',
        'connect_attempts': 'int',
        'kill_date': 'datetime',
        'dot_net_version': 'DotNetVersion',
        'runtime_identifier': 'RuntimeIdentifier',
        'status': 'GruntStatus',
        'integrity': 'IntegrityLevel',
        'process': 'str',
        'user_domain_name': 'str',
        'user_name': 'str',
        'ip_address': 'str',
        'hostname': 'str',
        'operating_system': 'str',
        'grunt_shared_secret_password': 'str',
        'grunt_rsa_public_key': 'str',
        'grunt_negotiated_session_key': 'str',
        'grunt_challenge': 'str',
        'activation_time': 'datetime',
        'last_check_in': 'datetime',
        'power_shell_import': 'str',
        'grunt_commands': 'list[GruntCommand]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'original_server_guid': 'originalServerGuid',
        'guid': 'guid',
        'children': 'children',
        'implant_template_id': 'implantTemplateId',
        'implant_template': 'implantTemplate',
        'validate_cert': 'validateCert',
        'use_cert_pinning': 'useCertPinning',
        'smb_pipe_name': 'smbPipeName',
        'listener_id': 'listenerId',
        'listener': 'listener',
        'note': 'note',
        'delay': 'delay',
        'jitter_percent': 'jitterPercent',
        'connect_attempts': 'connectAttempts',
        'kill_date': 'killDate',
        'dot_net_version': 'dotNetVersion',
        'runtime_identifier': 'runtimeIdentifier',
        'status': 'status',
        'integrity': 'integrity',
        'process': 'process',
        'user_domain_name': 'userDomainName',
        'user_name': 'userName',
        'ip_address': 'ipAddress',
        'hostname': 'hostname',
        'operating_system': 'operatingSystem',
        'grunt_shared_secret_password': 'gruntSharedSecretPassword',
        'grunt_rsa_public_key': 'gruntRSAPublicKey',
        'grunt_negotiated_session_key': 'gruntNegotiatedSessionKey',
        'grunt_challenge': 'gruntChallenge',
        'activation_time': 'activationTime',
        'last_check_in': 'lastCheckIn',
        'power_shell_import': 'powerShellImport',
        'grunt_commands': 'gruntCommands'
    }

    def __init__(self, id=None, name=None, original_server_guid=None, guid=None, children=None, implant_template_id=None, implant_template=None, validate_cert=None, use_cert_pinning=None, smb_pipe_name=None, listener_id=None, listener=None, note=None, delay=None, jitter_percent=None, connect_attempts=None, kill_date=None, dot_net_version=None, runtime_identifier=None, status=None, integrity=None, process=None, user_domain_name=None, user_name=None, ip_address=None, hostname=None, operating_system=None, grunt_shared_secret_password=None, grunt_rsa_public_key=None, grunt_negotiated_session_key=None, grunt_challenge=None, activation_time=None, last_check_in=None, power_shell_import=None, grunt_commands=None):  # noqa: E501
        """Grunt - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._original_server_guid = None
        self._guid = None
        self._children = None
        self._implant_template_id = None
        self._implant_template = None
        self._validate_cert = None
        self._use_cert_pinning = None
        self._smb_pipe_name = None
        self._listener_id = None
        self._listener = None
        self._note = None
        self._delay = None
        self._jitter_percent = None
        self._connect_attempts = None
        self._kill_date = None
        self._dot_net_version = None
        self._runtime_identifier = None
        self._status = None
        self._integrity = None
        self._process = None
        self._user_domain_name = None
        self._user_name = None
        self._ip_address = None
        self._hostname = None
        self._operating_system = None
        self._grunt_shared_secret_password = None
        self._grunt_rsa_public_key = None
        self._grunt_negotiated_session_key = None
        self._grunt_challenge = None
        self._activation_time = None
        self._last_check_in = None
        self._power_shell_import = None
        self._grunt_commands = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.original_server_guid = original_server_guid
        if guid is not None:
            self.guid = guid
        if children is not None:
            self.children = children
        self.implant_template_id = implant_template_id
        if implant_template is not None:
            self.implant_template = implant_template
        self.validate_cert = validate_cert
        self.use_cert_pinning = use_cert_pinning
        self.smb_pipe_name = smb_pipe_name
        if listener_id is not None:
            self.listener_id = listener_id
        if listener is not None:
            self.listener = listener
        if note is not None:
            self.note = note
        self.delay = delay
        self.jitter_percent = jitter_percent
        self.connect_attempts = connect_attempts
        self.kill_date = kill_date
        self.dot_net_version = dot_net_version
        self.runtime_identifier = runtime_identifier
        self.status = status
        self.integrity = integrity
        if process is not None:
            self.process = process
        if user_domain_name is not None:
            self.user_domain_name = user_domain_name
        if user_name is not None:
            self.user_name = user_name
        if ip_address is not None:
            self.ip_address = ip_address
        if hostname is not None:
            self.hostname = hostname
        if operating_system is not None:
            self.operating_system = operating_system
        if grunt_shared_secret_password is not None:
            self.grunt_shared_secret_password = grunt_shared_secret_password
        if grunt_rsa_public_key is not None:
            self.grunt_rsa_public_key = grunt_rsa_public_key
        if grunt_negotiated_session_key is not None:
            self.grunt_negotiated_session_key = grunt_negotiated_session_key
        if grunt_challenge is not None:
            self.grunt_challenge = grunt_challenge
        if activation_time is not None:
            self.activation_time = activation_time
        if last_check_in is not None:
            self.last_check_in = last_check_in
        if power_shell_import is not None:
            self.power_shell_import = power_shell_import
        if grunt_commands is not None:
            self.grunt_commands = grunt_commands

    @property
    def id(self):
        """Gets the id of this Grunt.  # noqa: E501


        :return: The id of this Grunt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Grunt.


        :param id: The id of this Grunt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Grunt.  # noqa: E501


        :return: The name of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Grunt.


        :param name: The name of this Grunt.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def original_server_guid(self):
        """Gets the original_server_guid of this Grunt.  # noqa: E501


        :return: The original_server_guid of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._original_server_guid

    @original_server_guid.setter
    def original_server_guid(self, original_server_guid):
        """Sets the original_server_guid of this Grunt.


        :param original_server_guid: The original_server_guid of this Grunt.  # noqa: E501
        :type: str
        """
        if original_server_guid is None:
            raise ValueError("Invalid value for `original_server_guid`, must not be `None`")  # noqa: E501

        self._original_server_guid = original_server_guid

    @property
    def guid(self):
        """Gets the guid of this Grunt.  # noqa: E501


        :return: The guid of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this Grunt.


        :param guid: The guid of this Grunt.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def children(self):
        """Gets the children of this Grunt.  # noqa: E501


        :return: The children of this Grunt.  # noqa: E501
        :rtype: list[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Grunt.


        :param children: The children of this Grunt.  # noqa: E501
        :type: list[str]
        """

        self._children = children

    @property
    def implant_template_id(self):
        """Gets the implant_template_id of this Grunt.  # noqa: E501


        :return: The implant_template_id of this Grunt.  # noqa: E501
        :rtype: int
        """
        return self._implant_template_id

    @implant_template_id.setter
    def implant_template_id(self, implant_template_id):
        """Sets the implant_template_id of this Grunt.


        :param implant_template_id: The implant_template_id of this Grunt.  # noqa: E501
        :type: int
        """
        if implant_template_id is None:
            raise ValueError("Invalid value for `implant_template_id`, must not be `None`")  # noqa: E501

        self._implant_template_id = implant_template_id

    @property
    def implant_template(self):
        """Gets the implant_template of this Grunt.  # noqa: E501


        :return: The implant_template of this Grunt.  # noqa: E501
        :rtype: ImplantTemplate
        """
        return self._implant_template

    @implant_template.setter
    def implant_template(self, implant_template):
        """Sets the implant_template of this Grunt.


        :param implant_template: The implant_template of this Grunt.  # noqa: E501
        :type: ImplantTemplate
        """

        self._implant_template = implant_template

    @property
    def validate_cert(self):
        """Gets the validate_cert of this Grunt.  # noqa: E501


        :return: The validate_cert of this Grunt.  # noqa: E501
        :rtype: bool
        """
        return self._validate_cert

    @validate_cert.setter
    def validate_cert(self, validate_cert):
        """Sets the validate_cert of this Grunt.


        :param validate_cert: The validate_cert of this Grunt.  # noqa: E501
        :type: bool
        """
        if validate_cert is None:
            raise ValueError("Invalid value for `validate_cert`, must not be `None`")  # noqa: E501

        self._validate_cert = validate_cert

    @property
    def use_cert_pinning(self):
        """Gets the use_cert_pinning of this Grunt.  # noqa: E501


        :return: The use_cert_pinning of this Grunt.  # noqa: E501
        :rtype: bool
        """
        return self._use_cert_pinning

    @use_cert_pinning.setter
    def use_cert_pinning(self, use_cert_pinning):
        """Sets the use_cert_pinning of this Grunt.


        :param use_cert_pinning: The use_cert_pinning of this Grunt.  # noqa: E501
        :type: bool
        """
        if use_cert_pinning is None:
            raise ValueError("Invalid value for `use_cert_pinning`, must not be `None`")  # noqa: E501

        self._use_cert_pinning = use_cert_pinning

    @property
    def smb_pipe_name(self):
        """Gets the smb_pipe_name of this Grunt.  # noqa: E501


        :return: The smb_pipe_name of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._smb_pipe_name

    @smb_pipe_name.setter
    def smb_pipe_name(self, smb_pipe_name):
        """Sets the smb_pipe_name of this Grunt.


        :param smb_pipe_name: The smb_pipe_name of this Grunt.  # noqa: E501
        :type: str
        """
        if smb_pipe_name is None:
            raise ValueError("Invalid value for `smb_pipe_name`, must not be `None`")  # noqa: E501

        self._smb_pipe_name = smb_pipe_name

    @property
    def listener_id(self):
        """Gets the listener_id of this Grunt.  # noqa: E501


        :return: The listener_id of this Grunt.  # noqa: E501
        :rtype: int
        """
        return self._listener_id

    @listener_id.setter
    def listener_id(self, listener_id):
        """Sets the listener_id of this Grunt.


        :param listener_id: The listener_id of this Grunt.  # noqa: E501
        :type: int
        """

        self._listener_id = listener_id

    @property
    def listener(self):
        """Gets the listener of this Grunt.  # noqa: E501


        :return: The listener of this Grunt.  # noqa: E501
        :rtype: Listener
        """
        return self._listener

    @listener.setter
    def listener(self, listener):
        """Sets the listener of this Grunt.


        :param listener: The listener of this Grunt.  # noqa: E501
        :type: Listener
        """

        self._listener = listener

    @property
    def note(self):
        """Gets the note of this Grunt.  # noqa: E501


        :return: The note of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Grunt.


        :param note: The note of this Grunt.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def delay(self):
        """Gets the delay of this Grunt.  # noqa: E501


        :return: The delay of this Grunt.  # noqa: E501
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this Grunt.


        :param delay: The delay of this Grunt.  # noqa: E501
        :type: int
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")  # noqa: E501
        if delay is not None and delay > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `delay`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if delay is not None and delay < 0:  # noqa: E501
            raise ValueError("Invalid value for `delay`, must be a value greater than or equal to `0`")  # noqa: E501

        self._delay = delay

    @property
    def jitter_percent(self):
        """Gets the jitter_percent of this Grunt.  # noqa: E501


        :return: The jitter_percent of this Grunt.  # noqa: E501
        :rtype: int
        """
        return self._jitter_percent

    @jitter_percent.setter
    def jitter_percent(self, jitter_percent):
        """Sets the jitter_percent of this Grunt.


        :param jitter_percent: The jitter_percent of this Grunt.  # noqa: E501
        :type: int
        """
        if jitter_percent is None:
            raise ValueError("Invalid value for `jitter_percent`, must not be `None`")  # noqa: E501
        if jitter_percent is not None and jitter_percent > 100:  # noqa: E501
            raise ValueError("Invalid value for `jitter_percent`, must be a value less than or equal to `100`")  # noqa: E501
        if jitter_percent is not None and jitter_percent < 0:  # noqa: E501
            raise ValueError("Invalid value for `jitter_percent`, must be a value greater than or equal to `0`")  # noqa: E501

        self._jitter_percent = jitter_percent

    @property
    def connect_attempts(self):
        """Gets the connect_attempts of this Grunt.  # noqa: E501


        :return: The connect_attempts of this Grunt.  # noqa: E501
        :rtype: int
        """
        return self._connect_attempts

    @connect_attempts.setter
    def connect_attempts(self, connect_attempts):
        """Sets the connect_attempts of this Grunt.


        :param connect_attempts: The connect_attempts of this Grunt.  # noqa: E501
        :type: int
        """
        if connect_attempts is None:
            raise ValueError("Invalid value for `connect_attempts`, must not be `None`")  # noqa: E501
        if connect_attempts is not None and connect_attempts > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `connect_attempts`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if connect_attempts is not None and connect_attempts < 0:  # noqa: E501
            raise ValueError("Invalid value for `connect_attempts`, must be a value greater than or equal to `0`")  # noqa: E501

        self._connect_attempts = connect_attempts

    @property
    def kill_date(self):
        """Gets the kill_date of this Grunt.  # noqa: E501


        :return: The kill_date of this Grunt.  # noqa: E501
        :rtype: datetime
        """
        return self._kill_date

    @kill_date.setter
    def kill_date(self, kill_date):
        """Sets the kill_date of this Grunt.


        :param kill_date: The kill_date of this Grunt.  # noqa: E501
        :type: datetime
        """
        if kill_date is None:
            raise ValueError("Invalid value for `kill_date`, must not be `None`")  # noqa: E501

        self._kill_date = kill_date

    @property
    def dot_net_version(self):
        """Gets the dot_net_version of this Grunt.  # noqa: E501


        :return: The dot_net_version of this Grunt.  # noqa: E501
        :rtype: DotNetVersion
        """
        return self._dot_net_version

    @dot_net_version.setter
    def dot_net_version(self, dot_net_version):
        """Sets the dot_net_version of this Grunt.


        :param dot_net_version: The dot_net_version of this Grunt.  # noqa: E501
        :type: DotNetVersion
        """
        if dot_net_version is None:
            raise ValueError("Invalid value for `dot_net_version`, must not be `None`")  # noqa: E501

        self._dot_net_version = dot_net_version

    @property
    def runtime_identifier(self):
        """Gets the runtime_identifier of this Grunt.  # noqa: E501


        :return: The runtime_identifier of this Grunt.  # noqa: E501
        :rtype: RuntimeIdentifier
        """
        return self._runtime_identifier

    @runtime_identifier.setter
    def runtime_identifier(self, runtime_identifier):
        """Sets the runtime_identifier of this Grunt.


        :param runtime_identifier: The runtime_identifier of this Grunt.  # noqa: E501
        :type: RuntimeIdentifier
        """
        if runtime_identifier is None:
            raise ValueError("Invalid value for `runtime_identifier`, must not be `None`")  # noqa: E501

        self._runtime_identifier = runtime_identifier

    @property
    def status(self):
        """Gets the status of this Grunt.  # noqa: E501


        :return: The status of this Grunt.  # noqa: E501
        :rtype: GruntStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Grunt.


        :param status: The status of this Grunt.  # noqa: E501
        :type: GruntStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def integrity(self):
        """Gets the integrity of this Grunt.  # noqa: E501


        :return: The integrity of this Grunt.  # noqa: E501
        :rtype: IntegrityLevel
        """
        return self._integrity

    @integrity.setter
    def integrity(self, integrity):
        """Sets the integrity of this Grunt.


        :param integrity: The integrity of this Grunt.  # noqa: E501
        :type: IntegrityLevel
        """
        if integrity is None:
            raise ValueError("Invalid value for `integrity`, must not be `None`")  # noqa: E501

        self._integrity = integrity

    @property
    def process(self):
        """Gets the process of this Grunt.  # noqa: E501


        :return: The process of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this Grunt.


        :param process: The process of this Grunt.  # noqa: E501
        :type: str
        """

        self._process = process

    @property
    def user_domain_name(self):
        """Gets the user_domain_name of this Grunt.  # noqa: E501


        :return: The user_domain_name of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._user_domain_name

    @user_domain_name.setter
    def user_domain_name(self, user_domain_name):
        """Sets the user_domain_name of this Grunt.


        :param user_domain_name: The user_domain_name of this Grunt.  # noqa: E501
        :type: str
        """

        self._user_domain_name = user_domain_name

    @property
    def user_name(self):
        """Gets the user_name of this Grunt.  # noqa: E501


        :return: The user_name of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Grunt.


        :param user_name: The user_name of this Grunt.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def ip_address(self):
        """Gets the ip_address of this Grunt.  # noqa: E501


        :return: The ip_address of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Grunt.


        :param ip_address: The ip_address of this Grunt.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def hostname(self):
        """Gets the hostname of this Grunt.  # noqa: E501


        :return: The hostname of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Grunt.


        :param hostname: The hostname of this Grunt.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def operating_system(self):
        """Gets the operating_system of this Grunt.  # noqa: E501


        :return: The operating_system of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this Grunt.


        :param operating_system: The operating_system of this Grunt.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def grunt_shared_secret_password(self):
        """Gets the grunt_shared_secret_password of this Grunt.  # noqa: E501


        :return: The grunt_shared_secret_password of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._grunt_shared_secret_password

    @grunt_shared_secret_password.setter
    def grunt_shared_secret_password(self, grunt_shared_secret_password):
        """Sets the grunt_shared_secret_password of this Grunt.


        :param grunt_shared_secret_password: The grunt_shared_secret_password of this Grunt.  # noqa: E501
        :type: str
        """

        self._grunt_shared_secret_password = grunt_shared_secret_password

    @property
    def grunt_rsa_public_key(self):
        """Gets the grunt_rsa_public_key of this Grunt.  # noqa: E501


        :return: The grunt_rsa_public_key of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._grunt_rsa_public_key

    @grunt_rsa_public_key.setter
    def grunt_rsa_public_key(self, grunt_rsa_public_key):
        """Sets the grunt_rsa_public_key of this Grunt.


        :param grunt_rsa_public_key: The grunt_rsa_public_key of this Grunt.  # noqa: E501
        :type: str
        """

        self._grunt_rsa_public_key = grunt_rsa_public_key

    @property
    def grunt_negotiated_session_key(self):
        """Gets the grunt_negotiated_session_key of this Grunt.  # noqa: E501


        :return: The grunt_negotiated_session_key of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._grunt_negotiated_session_key

    @grunt_negotiated_session_key.setter
    def grunt_negotiated_session_key(self, grunt_negotiated_session_key):
        """Sets the grunt_negotiated_session_key of this Grunt.


        :param grunt_negotiated_session_key: The grunt_negotiated_session_key of this Grunt.  # noqa: E501
        :type: str
        """

        self._grunt_negotiated_session_key = grunt_negotiated_session_key

    @property
    def grunt_challenge(self):
        """Gets the grunt_challenge of this Grunt.  # noqa: E501


        :return: The grunt_challenge of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._grunt_challenge

    @grunt_challenge.setter
    def grunt_challenge(self, grunt_challenge):
        """Sets the grunt_challenge of this Grunt.


        :param grunt_challenge: The grunt_challenge of this Grunt.  # noqa: E501
        :type: str
        """

        self._grunt_challenge = grunt_challenge

    @property
    def activation_time(self):
        """Gets the activation_time of this Grunt.  # noqa: E501


        :return: The activation_time of this Grunt.  # noqa: E501
        :rtype: datetime
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this Grunt.


        :param activation_time: The activation_time of this Grunt.  # noqa: E501
        :type: datetime
        """

        self._activation_time = activation_time

    @property
    def last_check_in(self):
        """Gets the last_check_in of this Grunt.  # noqa: E501


        :return: The last_check_in of this Grunt.  # noqa: E501
        :rtype: datetime
        """
        return self._last_check_in

    @last_check_in.setter
    def last_check_in(self, last_check_in):
        """Sets the last_check_in of this Grunt.


        :param last_check_in: The last_check_in of this Grunt.  # noqa: E501
        :type: datetime
        """

        self._last_check_in = last_check_in

    @property
    def power_shell_import(self):
        """Gets the power_shell_import of this Grunt.  # noqa: E501


        :return: The power_shell_import of this Grunt.  # noqa: E501
        :rtype: str
        """
        return self._power_shell_import

    @power_shell_import.setter
    def power_shell_import(self, power_shell_import):
        """Sets the power_shell_import of this Grunt.


        :param power_shell_import: The power_shell_import of this Grunt.  # noqa: E501
        :type: str
        """

        self._power_shell_import = power_shell_import

    @property
    def grunt_commands(self):
        """Gets the grunt_commands of this Grunt.  # noqa: E501


        :return: The grunt_commands of this Grunt.  # noqa: E501
        :rtype: list[GruntCommand]
        """
        return self._grunt_commands

    @grunt_commands.setter
    def grunt_commands(self, grunt_commands):
        """Sets the grunt_commands of this Grunt.


        :param grunt_commands: The grunt_commands of this Grunt.  # noqa: E501
        :type: list[GruntCommand]
        """

        self._grunt_commands = grunt_commands

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Grunt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Grunt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
