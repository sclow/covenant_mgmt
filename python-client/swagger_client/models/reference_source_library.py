# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReferenceSourceLibrary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'location': 'str',
        'language': 'ImplantLanguage',
        'compatible_dot_net_versions': 'list[DotNetVersion]',
        'reference_assemblies': 'list[ReferenceAssembly]',
        'embedded_resources': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'location': 'location',
        'language': 'language',
        'compatible_dot_net_versions': 'compatibleDotNetVersions',
        'reference_assemblies': 'referenceAssemblies',
        'embedded_resources': 'embeddedResources'
    }

    def __init__(self, id=None, name=None, description=None, location=None, language=None, compatible_dot_net_versions=None, reference_assemblies=None, embedded_resources=None):  # noqa: E501
        """ReferenceSourceLibrary - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._location = None
        self._language = None
        self._compatible_dot_net_versions = None
        self._reference_assemblies = None
        self._embedded_resources = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if language is not None:
            self.language = language
        if compatible_dot_net_versions is not None:
            self.compatible_dot_net_versions = compatible_dot_net_versions
        if reference_assemblies is not None:
            self.reference_assemblies = reference_assemblies
        if embedded_resources is not None:
            self.embedded_resources = embedded_resources

    @property
    def id(self):
        """Gets the id of this ReferenceSourceLibrary.  # noqa: E501


        :return: The id of this ReferenceSourceLibrary.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReferenceSourceLibrary.


        :param id: The id of this ReferenceSourceLibrary.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReferenceSourceLibrary.  # noqa: E501


        :return: The name of this ReferenceSourceLibrary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReferenceSourceLibrary.


        :param name: The name of this ReferenceSourceLibrary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ReferenceSourceLibrary.  # noqa: E501


        :return: The description of this ReferenceSourceLibrary.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReferenceSourceLibrary.


        :param description: The description of this ReferenceSourceLibrary.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this ReferenceSourceLibrary.  # noqa: E501


        :return: The location of this ReferenceSourceLibrary.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ReferenceSourceLibrary.


        :param location: The location of this ReferenceSourceLibrary.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def language(self):
        """Gets the language of this ReferenceSourceLibrary.  # noqa: E501


        :return: The language of this ReferenceSourceLibrary.  # noqa: E501
        :rtype: ImplantLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ReferenceSourceLibrary.


        :param language: The language of this ReferenceSourceLibrary.  # noqa: E501
        :type: ImplantLanguage
        """

        self._language = language

    @property
    def compatible_dot_net_versions(self):
        """Gets the compatible_dot_net_versions of this ReferenceSourceLibrary.  # noqa: E501


        :return: The compatible_dot_net_versions of this ReferenceSourceLibrary.  # noqa: E501
        :rtype: list[DotNetVersion]
        """
        return self._compatible_dot_net_versions

    @compatible_dot_net_versions.setter
    def compatible_dot_net_versions(self, compatible_dot_net_versions):
        """Sets the compatible_dot_net_versions of this ReferenceSourceLibrary.


        :param compatible_dot_net_versions: The compatible_dot_net_versions of this ReferenceSourceLibrary.  # noqa: E501
        :type: list[DotNetVersion]
        """

        self._compatible_dot_net_versions = compatible_dot_net_versions

    @property
    def reference_assemblies(self):
        """Gets the reference_assemblies of this ReferenceSourceLibrary.  # noqa: E501


        :return: The reference_assemblies of this ReferenceSourceLibrary.  # noqa: E501
        :rtype: list[ReferenceAssembly]
        """
        return self._reference_assemblies

    @reference_assemblies.setter
    def reference_assemblies(self, reference_assemblies):
        """Sets the reference_assemblies of this ReferenceSourceLibrary.


        :param reference_assemblies: The reference_assemblies of this ReferenceSourceLibrary.  # noqa: E501
        :type: list[ReferenceAssembly]
        """

        self._reference_assemblies = reference_assemblies

    @property
    def embedded_resources(self):
        """Gets the embedded_resources of this ReferenceSourceLibrary.  # noqa: E501


        :return: The embedded_resources of this ReferenceSourceLibrary.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded_resources

    @embedded_resources.setter
    def embedded_resources(self, embedded_resources):
        """Sets the embedded_resources of this ReferenceSourceLibrary.


        :param embedded_resources: The embedded_resources of this ReferenceSourceLibrary.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded_resources = embedded_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReferenceSourceLibrary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReferenceSourceLibrary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
