# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CovenantUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'theme_id': 'int',
        'theme': 'Theme',
        'id': 'str',
        'user_name': 'str',
        'normalized_user_name': 'str',
        'email': 'str',
        'normalized_email': 'str',
        'email_confirmed': 'bool',
        'password_hash': 'str',
        'security_stamp': 'str',
        'concurrency_stamp': 'str',
        'phone_number': 'str',
        'phone_number_confirmed': 'bool',
        'two_factor_enabled': 'bool',
        'lockout_end': 'datetime',
        'lockout_enabled': 'bool',
        'access_failed_count': 'int'
    }

    attribute_map = {
        'theme_id': 'themeId',
        'theme': 'theme',
        'id': 'id',
        'user_name': 'userName',
        'normalized_user_name': 'normalizedUserName',
        'email': 'email',
        'normalized_email': 'normalizedEmail',
        'email_confirmed': 'emailConfirmed',
        'password_hash': 'passwordHash',
        'security_stamp': 'securityStamp',
        'concurrency_stamp': 'concurrencyStamp',
        'phone_number': 'phoneNumber',
        'phone_number_confirmed': 'phoneNumberConfirmed',
        'two_factor_enabled': 'twoFactorEnabled',
        'lockout_end': 'lockoutEnd',
        'lockout_enabled': 'lockoutEnabled',
        'access_failed_count': 'accessFailedCount'
    }

    def __init__(self, theme_id=None, theme=None, id=None, user_name=None, normalized_user_name=None, email=None, normalized_email=None, email_confirmed=None, password_hash=None, security_stamp=None, concurrency_stamp=None, phone_number=None, phone_number_confirmed=None, two_factor_enabled=None, lockout_end=None, lockout_enabled=None, access_failed_count=None):  # noqa: E501
        """CovenantUser - a model defined in Swagger"""  # noqa: E501

        self._theme_id = None
        self._theme = None
        self._id = None
        self._user_name = None
        self._normalized_user_name = None
        self._email = None
        self._normalized_email = None
        self._email_confirmed = None
        self._password_hash = None
        self._security_stamp = None
        self._concurrency_stamp = None
        self._phone_number = None
        self._phone_number_confirmed = None
        self._two_factor_enabled = None
        self._lockout_end = None
        self._lockout_enabled = None
        self._access_failed_count = None
        self.discriminator = None

        if theme_id is not None:
            self.theme_id = theme_id
        if theme is not None:
            self.theme = theme
        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if normalized_user_name is not None:
            self.normalized_user_name = normalized_user_name
        if email is not None:
            self.email = email
        if normalized_email is not None:
            self.normalized_email = normalized_email
        if email_confirmed is not None:
            self.email_confirmed = email_confirmed
        if password_hash is not None:
            self.password_hash = password_hash
        if security_stamp is not None:
            self.security_stamp = security_stamp
        if concurrency_stamp is not None:
            self.concurrency_stamp = concurrency_stamp
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_number_confirmed is not None:
            self.phone_number_confirmed = phone_number_confirmed
        if two_factor_enabled is not None:
            self.two_factor_enabled = two_factor_enabled
        if lockout_end is not None:
            self.lockout_end = lockout_end
        if lockout_enabled is not None:
            self.lockout_enabled = lockout_enabled
        if access_failed_count is not None:
            self.access_failed_count = access_failed_count

    @property
    def theme_id(self):
        """Gets the theme_id of this CovenantUser.  # noqa: E501


        :return: The theme_id of this CovenantUser.  # noqa: E501
        :rtype: int
        """
        return self._theme_id

    @theme_id.setter
    def theme_id(self, theme_id):
        """Sets the theme_id of this CovenantUser.


        :param theme_id: The theme_id of this CovenantUser.  # noqa: E501
        :type: int
        """

        self._theme_id = theme_id

    @property
    def theme(self):
        """Gets the theme of this CovenantUser.  # noqa: E501


        :return: The theme of this CovenantUser.  # noqa: E501
        :rtype: Theme
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this CovenantUser.


        :param theme: The theme of this CovenantUser.  # noqa: E501
        :type: Theme
        """

        self._theme = theme

    @property
    def id(self):
        """Gets the id of this CovenantUser.  # noqa: E501


        :return: The id of this CovenantUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CovenantUser.


        :param id: The id of this CovenantUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this CovenantUser.  # noqa: E501


        :return: The user_name of this CovenantUser.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this CovenantUser.


        :param user_name: The user_name of this CovenantUser.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def normalized_user_name(self):
        """Gets the normalized_user_name of this CovenantUser.  # noqa: E501


        :return: The normalized_user_name of this CovenantUser.  # noqa: E501
        :rtype: str
        """
        return self._normalized_user_name

    @normalized_user_name.setter
    def normalized_user_name(self, normalized_user_name):
        """Sets the normalized_user_name of this CovenantUser.


        :param normalized_user_name: The normalized_user_name of this CovenantUser.  # noqa: E501
        :type: str
        """

        self._normalized_user_name = normalized_user_name

    @property
    def email(self):
        """Gets the email of this CovenantUser.  # noqa: E501


        :return: The email of this CovenantUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CovenantUser.


        :param email: The email of this CovenantUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def normalized_email(self):
        """Gets the normalized_email of this CovenantUser.  # noqa: E501


        :return: The normalized_email of this CovenantUser.  # noqa: E501
        :rtype: str
        """
        return self._normalized_email

    @normalized_email.setter
    def normalized_email(self, normalized_email):
        """Sets the normalized_email of this CovenantUser.


        :param normalized_email: The normalized_email of this CovenantUser.  # noqa: E501
        :type: str
        """

        self._normalized_email = normalized_email

    @property
    def email_confirmed(self):
        """Gets the email_confirmed of this CovenantUser.  # noqa: E501


        :return: The email_confirmed of this CovenantUser.  # noqa: E501
        :rtype: bool
        """
        return self._email_confirmed

    @email_confirmed.setter
    def email_confirmed(self, email_confirmed):
        """Sets the email_confirmed of this CovenantUser.


        :param email_confirmed: The email_confirmed of this CovenantUser.  # noqa: E501
        :type: bool
        """

        self._email_confirmed = email_confirmed

    @property
    def password_hash(self):
        """Gets the password_hash of this CovenantUser.  # noqa: E501


        :return: The password_hash of this CovenantUser.  # noqa: E501
        :rtype: str
        """
        return self._password_hash

    @password_hash.setter
    def password_hash(self, password_hash):
        """Sets the password_hash of this CovenantUser.


        :param password_hash: The password_hash of this CovenantUser.  # noqa: E501
        :type: str
        """

        self._password_hash = password_hash

    @property
    def security_stamp(self):
        """Gets the security_stamp of this CovenantUser.  # noqa: E501


        :return: The security_stamp of this CovenantUser.  # noqa: E501
        :rtype: str
        """
        return self._security_stamp

    @security_stamp.setter
    def security_stamp(self, security_stamp):
        """Sets the security_stamp of this CovenantUser.


        :param security_stamp: The security_stamp of this CovenantUser.  # noqa: E501
        :type: str
        """

        self._security_stamp = security_stamp

    @property
    def concurrency_stamp(self):
        """Gets the concurrency_stamp of this CovenantUser.  # noqa: E501


        :return: The concurrency_stamp of this CovenantUser.  # noqa: E501
        :rtype: str
        """
        return self._concurrency_stamp

    @concurrency_stamp.setter
    def concurrency_stamp(self, concurrency_stamp):
        """Sets the concurrency_stamp of this CovenantUser.


        :param concurrency_stamp: The concurrency_stamp of this CovenantUser.  # noqa: E501
        :type: str
        """

        self._concurrency_stamp = concurrency_stamp

    @property
    def phone_number(self):
        """Gets the phone_number of this CovenantUser.  # noqa: E501


        :return: The phone_number of this CovenantUser.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CovenantUser.


        :param phone_number: The phone_number of this CovenantUser.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_confirmed(self):
        """Gets the phone_number_confirmed of this CovenantUser.  # noqa: E501


        :return: The phone_number_confirmed of this CovenantUser.  # noqa: E501
        :rtype: bool
        """
        return self._phone_number_confirmed

    @phone_number_confirmed.setter
    def phone_number_confirmed(self, phone_number_confirmed):
        """Sets the phone_number_confirmed of this CovenantUser.


        :param phone_number_confirmed: The phone_number_confirmed of this CovenantUser.  # noqa: E501
        :type: bool
        """

        self._phone_number_confirmed = phone_number_confirmed

    @property
    def two_factor_enabled(self):
        """Gets the two_factor_enabled of this CovenantUser.  # noqa: E501


        :return: The two_factor_enabled of this CovenantUser.  # noqa: E501
        :rtype: bool
        """
        return self._two_factor_enabled

    @two_factor_enabled.setter
    def two_factor_enabled(self, two_factor_enabled):
        """Sets the two_factor_enabled of this CovenantUser.


        :param two_factor_enabled: The two_factor_enabled of this CovenantUser.  # noqa: E501
        :type: bool
        """

        self._two_factor_enabled = two_factor_enabled

    @property
    def lockout_end(self):
        """Gets the lockout_end of this CovenantUser.  # noqa: E501


        :return: The lockout_end of this CovenantUser.  # noqa: E501
        :rtype: datetime
        """
        return self._lockout_end

    @lockout_end.setter
    def lockout_end(self, lockout_end):
        """Sets the lockout_end of this CovenantUser.


        :param lockout_end: The lockout_end of this CovenantUser.  # noqa: E501
        :type: datetime
        """

        self._lockout_end = lockout_end

    @property
    def lockout_enabled(self):
        """Gets the lockout_enabled of this CovenantUser.  # noqa: E501


        :return: The lockout_enabled of this CovenantUser.  # noqa: E501
        :rtype: bool
        """
        return self._lockout_enabled

    @lockout_enabled.setter
    def lockout_enabled(self, lockout_enabled):
        """Sets the lockout_enabled of this CovenantUser.


        :param lockout_enabled: The lockout_enabled of this CovenantUser.  # noqa: E501
        :type: bool
        """

        self._lockout_enabled = lockout_enabled

    @property
    def access_failed_count(self):
        """Gets the access_failed_count of this CovenantUser.  # noqa: E501


        :return: The access_failed_count of this CovenantUser.  # noqa: E501
        :rtype: int
        """
        return self._access_failed_count

    @access_failed_count.setter
    def access_failed_count(self, access_failed_count):
        """Sets the access_failed_count of this CovenantUser.


        :param access_failed_count: The access_failed_count of this CovenantUser.  # noqa: E501
        :type: int
        """

        self._access_failed_count = access_failed_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CovenantUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CovenantUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
