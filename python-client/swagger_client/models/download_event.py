# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DownloadEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'file_contents': 'str',
        'progress': 'DownloadProgress',
        'id': 'int',
        'time': 'datetime',
        'message_header': 'str',
        'message_body': 'str',
        'level': 'EventLevel',
        'type': 'EventType',
        'context': 'str'
    }

    attribute_map = {
        'file_name': 'fileName',
        'file_contents': 'fileContents',
        'progress': 'progress',
        'id': 'id',
        'time': 'time',
        'message_header': 'messageHeader',
        'message_body': 'messageBody',
        'level': 'level',
        'type': 'type',
        'context': 'context'
    }

    def __init__(self, file_name=None, file_contents=None, progress=None, id=None, time=None, message_header=None, message_body=None, level=None, type=None, context=None):  # noqa: E501
        """DownloadEvent - a model defined in Swagger"""  # noqa: E501

        self._file_name = None
        self._file_contents = None
        self._progress = None
        self._id = None
        self._time = None
        self._message_header = None
        self._message_body = None
        self._level = None
        self._type = None
        self._context = None
        self.discriminator = None

        if file_name is not None:
            self.file_name = file_name
        if file_contents is not None:
            self.file_contents = file_contents
        if progress is not None:
            self.progress = progress
        if id is not None:
            self.id = id
        if time is not None:
            self.time = time
        if message_header is not None:
            self.message_header = message_header
        if message_body is not None:
            self.message_body = message_body
        if level is not None:
            self.level = level
        if type is not None:
            self.type = type
        if context is not None:
            self.context = context

    @property
    def file_name(self):
        """Gets the file_name of this DownloadEvent.  # noqa: E501


        :return: The file_name of this DownloadEvent.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this DownloadEvent.


        :param file_name: The file_name of this DownloadEvent.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_contents(self):
        """Gets the file_contents of this DownloadEvent.  # noqa: E501


        :return: The file_contents of this DownloadEvent.  # noqa: E501
        :rtype: str
        """
        return self._file_contents

    @file_contents.setter
    def file_contents(self, file_contents):
        """Sets the file_contents of this DownloadEvent.


        :param file_contents: The file_contents of this DownloadEvent.  # noqa: E501
        :type: str
        """

        self._file_contents = file_contents

    @property
    def progress(self):
        """Gets the progress of this DownloadEvent.  # noqa: E501


        :return: The progress of this DownloadEvent.  # noqa: E501
        :rtype: DownloadProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DownloadEvent.


        :param progress: The progress of this DownloadEvent.  # noqa: E501
        :type: DownloadProgress
        """

        self._progress = progress

    @property
    def id(self):
        """Gets the id of this DownloadEvent.  # noqa: E501


        :return: The id of this DownloadEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DownloadEvent.


        :param id: The id of this DownloadEvent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def time(self):
        """Gets the time of this DownloadEvent.  # noqa: E501


        :return: The time of this DownloadEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DownloadEvent.


        :param time: The time of this DownloadEvent.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def message_header(self):
        """Gets the message_header of this DownloadEvent.  # noqa: E501


        :return: The message_header of this DownloadEvent.  # noqa: E501
        :rtype: str
        """
        return self._message_header

    @message_header.setter
    def message_header(self, message_header):
        """Sets the message_header of this DownloadEvent.


        :param message_header: The message_header of this DownloadEvent.  # noqa: E501
        :type: str
        """

        self._message_header = message_header

    @property
    def message_body(self):
        """Gets the message_body of this DownloadEvent.  # noqa: E501


        :return: The message_body of this DownloadEvent.  # noqa: E501
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this DownloadEvent.


        :param message_body: The message_body of this DownloadEvent.  # noqa: E501
        :type: str
        """

        self._message_body = message_body

    @property
    def level(self):
        """Gets the level of this DownloadEvent.  # noqa: E501


        :return: The level of this DownloadEvent.  # noqa: E501
        :rtype: EventLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DownloadEvent.


        :param level: The level of this DownloadEvent.  # noqa: E501
        :type: EventLevel
        """

        self._level = level

    @property
    def type(self):
        """Gets the type of this DownloadEvent.  # noqa: E501


        :return: The type of this DownloadEvent.  # noqa: E501
        :rtype: EventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DownloadEvent.


        :param type: The type of this DownloadEvent.  # noqa: E501
        :type: EventType
        """

        self._type = type

    @property
    def context(self):
        """Gets the context of this DownloadEvent.  # noqa: E501


        :return: The context of this DownloadEvent.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this DownloadEvent.


        :param context: The context of this DownloadEvent.  # noqa: E501
        :type: str
        """

        self._context = context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DownloadEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DownloadEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
