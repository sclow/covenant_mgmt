# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HttpProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'http_urls': 'list[str]',
        'http_request_headers': 'list[HttpProfileHeader]',
        'http_response_headers': 'list[HttpProfileHeader]',
        'http_post_request': 'str',
        'http_get_response': 'str',
        'http_post_response': 'str',
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'type': 'ProfileType',
        'message_transform': 'str'
    }

    attribute_map = {
        'http_urls': 'httpUrls',
        'http_request_headers': 'httpRequestHeaders',
        'http_response_headers': 'httpResponseHeaders',
        'http_post_request': 'httpPostRequest',
        'http_get_response': 'httpGetResponse',
        'http_post_response': 'httpPostResponse',
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'message_transform': 'messageTransform'
    }

    def __init__(self, http_urls=None, http_request_headers=None, http_response_headers=None, http_post_request=None, http_get_response=None, http_post_response=None, id=None, name=None, description=None, type=None, message_transform=None):  # noqa: E501
        """HttpProfile - a model defined in Swagger"""  # noqa: E501

        self._http_urls = None
        self._http_request_headers = None
        self._http_response_headers = None
        self._http_post_request = None
        self._http_get_response = None
        self._http_post_response = None
        self._id = None
        self._name = None
        self._description = None
        self._type = None
        self._message_transform = None
        self.discriminator = None

        if http_urls is not None:
            self.http_urls = http_urls
        if http_request_headers is not None:
            self.http_request_headers = http_request_headers
        if http_response_headers is not None:
            self.http_response_headers = http_response_headers
        if http_post_request is not None:
            self.http_post_request = http_post_request
        if http_get_response is not None:
            self.http_get_response = http_get_response
        if http_post_response is not None:
            self.http_post_response = http_post_response
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if message_transform is not None:
            self.message_transform = message_transform

    @property
    def http_urls(self):
        """Gets the http_urls of this HttpProfile.  # noqa: E501


        :return: The http_urls of this HttpProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._http_urls

    @http_urls.setter
    def http_urls(self, http_urls):
        """Sets the http_urls of this HttpProfile.


        :param http_urls: The http_urls of this HttpProfile.  # noqa: E501
        :type: list[str]
        """

        self._http_urls = http_urls

    @property
    def http_request_headers(self):
        """Gets the http_request_headers of this HttpProfile.  # noqa: E501


        :return: The http_request_headers of this HttpProfile.  # noqa: E501
        :rtype: list[HttpProfileHeader]
        """
        return self._http_request_headers

    @http_request_headers.setter
    def http_request_headers(self, http_request_headers):
        """Sets the http_request_headers of this HttpProfile.


        :param http_request_headers: The http_request_headers of this HttpProfile.  # noqa: E501
        :type: list[HttpProfileHeader]
        """

        self._http_request_headers = http_request_headers

    @property
    def http_response_headers(self):
        """Gets the http_response_headers of this HttpProfile.  # noqa: E501


        :return: The http_response_headers of this HttpProfile.  # noqa: E501
        :rtype: list[HttpProfileHeader]
        """
        return self._http_response_headers

    @http_response_headers.setter
    def http_response_headers(self, http_response_headers):
        """Sets the http_response_headers of this HttpProfile.


        :param http_response_headers: The http_response_headers of this HttpProfile.  # noqa: E501
        :type: list[HttpProfileHeader]
        """

        self._http_response_headers = http_response_headers

    @property
    def http_post_request(self):
        """Gets the http_post_request of this HttpProfile.  # noqa: E501


        :return: The http_post_request of this HttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._http_post_request

    @http_post_request.setter
    def http_post_request(self, http_post_request):
        """Sets the http_post_request of this HttpProfile.


        :param http_post_request: The http_post_request of this HttpProfile.  # noqa: E501
        :type: str
        """

        self._http_post_request = http_post_request

    @property
    def http_get_response(self):
        """Gets the http_get_response of this HttpProfile.  # noqa: E501


        :return: The http_get_response of this HttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._http_get_response

    @http_get_response.setter
    def http_get_response(self, http_get_response):
        """Sets the http_get_response of this HttpProfile.


        :param http_get_response: The http_get_response of this HttpProfile.  # noqa: E501
        :type: str
        """

        self._http_get_response = http_get_response

    @property
    def http_post_response(self):
        """Gets the http_post_response of this HttpProfile.  # noqa: E501


        :return: The http_post_response of this HttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._http_post_response

    @http_post_response.setter
    def http_post_response(self, http_post_response):
        """Sets the http_post_response of this HttpProfile.


        :param http_post_response: The http_post_response of this HttpProfile.  # noqa: E501
        :type: str
        """

        self._http_post_response = http_post_response

    @property
    def id(self):
        """Gets the id of this HttpProfile.  # noqa: E501


        :return: The id of this HttpProfile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HttpProfile.


        :param id: The id of this HttpProfile.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this HttpProfile.  # noqa: E501


        :return: The name of this HttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HttpProfile.


        :param name: The name of this HttpProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this HttpProfile.  # noqa: E501


        :return: The description of this HttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HttpProfile.


        :param description: The description of this HttpProfile.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this HttpProfile.  # noqa: E501


        :return: The type of this HttpProfile.  # noqa: E501
        :rtype: ProfileType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HttpProfile.


        :param type: The type of this HttpProfile.  # noqa: E501
        :type: ProfileType
        """

        self._type = type

    @property
    def message_transform(self):
        """Gets the message_transform of this HttpProfile.  # noqa: E501


        :return: The message_transform of this HttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._message_transform

    @message_transform.setter
    def message_transform(self, message_transform):
        """Sets the message_transform of this HttpProfile.


        :param message_transform: The message_transform of this HttpProfile.  # noqa: E501
        :type: str
        """

        self._message_transform = message_transform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
