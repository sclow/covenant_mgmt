# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GruntTaskOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'value': 'str',
        'default_value': 'str',
        'description': 'str',
        'suggested_values': 'list[str]',
        'optional': 'bool',
        'display_in_command': 'bool',
        'file_option': 'bool',
        'grunt_task_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'value': 'value',
        'default_value': 'defaultValue',
        'description': 'description',
        'suggested_values': 'suggestedValues',
        'optional': 'optional',
        'display_in_command': 'displayInCommand',
        'file_option': 'fileOption',
        'grunt_task_id': 'gruntTaskId'
    }

    def __init__(self, id=None, name=None, value=None, default_value=None, description=None, suggested_values=None, optional=None, display_in_command=None, file_option=None, grunt_task_id=None):  # noqa: E501
        """GruntTaskOption - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._value = None
        self._default_value = None
        self._description = None
        self._suggested_values = None
        self._optional = None
        self._display_in_command = None
        self._file_option = None
        self._grunt_task_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if default_value is not None:
            self.default_value = default_value
        if description is not None:
            self.description = description
        if suggested_values is not None:
            self.suggested_values = suggested_values
        if optional is not None:
            self.optional = optional
        if display_in_command is not None:
            self.display_in_command = display_in_command
        if file_option is not None:
            self.file_option = file_option
        if grunt_task_id is not None:
            self.grunt_task_id = grunt_task_id

    @property
    def id(self):
        """Gets the id of this GruntTaskOption.  # noqa: E501


        :return: The id of this GruntTaskOption.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GruntTaskOption.


        :param id: The id of this GruntTaskOption.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GruntTaskOption.  # noqa: E501


        :return: The name of this GruntTaskOption.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GruntTaskOption.


        :param name: The name of this GruntTaskOption.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this GruntTaskOption.  # noqa: E501


        :return: The value of this GruntTaskOption.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GruntTaskOption.


        :param value: The value of this GruntTaskOption.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def default_value(self):
        """Gets the default_value of this GruntTaskOption.  # noqa: E501


        :return: The default_value of this GruntTaskOption.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this GruntTaskOption.


        :param default_value: The default_value of this GruntTaskOption.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this GruntTaskOption.  # noqa: E501


        :return: The description of this GruntTaskOption.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GruntTaskOption.


        :param description: The description of this GruntTaskOption.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def suggested_values(self):
        """Gets the suggested_values of this GruntTaskOption.  # noqa: E501


        :return: The suggested_values of this GruntTaskOption.  # noqa: E501
        :rtype: list[str]
        """
        return self._suggested_values

    @suggested_values.setter
    def suggested_values(self, suggested_values):
        """Sets the suggested_values of this GruntTaskOption.


        :param suggested_values: The suggested_values of this GruntTaskOption.  # noqa: E501
        :type: list[str]
        """

        self._suggested_values = suggested_values

    @property
    def optional(self):
        """Gets the optional of this GruntTaskOption.  # noqa: E501


        :return: The optional of this GruntTaskOption.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this GruntTaskOption.


        :param optional: The optional of this GruntTaskOption.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    @property
    def display_in_command(self):
        """Gets the display_in_command of this GruntTaskOption.  # noqa: E501


        :return: The display_in_command of this GruntTaskOption.  # noqa: E501
        :rtype: bool
        """
        return self._display_in_command

    @display_in_command.setter
    def display_in_command(self, display_in_command):
        """Sets the display_in_command of this GruntTaskOption.


        :param display_in_command: The display_in_command of this GruntTaskOption.  # noqa: E501
        :type: bool
        """

        self._display_in_command = display_in_command

    @property
    def file_option(self):
        """Gets the file_option of this GruntTaskOption.  # noqa: E501


        :return: The file_option of this GruntTaskOption.  # noqa: E501
        :rtype: bool
        """
        return self._file_option

    @file_option.setter
    def file_option(self, file_option):
        """Sets the file_option of this GruntTaskOption.


        :param file_option: The file_option of this GruntTaskOption.  # noqa: E501
        :type: bool
        """

        self._file_option = file_option

    @property
    def grunt_task_id(self):
        """Gets the grunt_task_id of this GruntTaskOption.  # noqa: E501


        :return: The grunt_task_id of this GruntTaskOption.  # noqa: E501
        :rtype: int
        """
        return self._grunt_task_id

    @grunt_task_id.setter
    def grunt_task_id(self, grunt_task_id):
        """Sets the grunt_task_id of this GruntTaskOption.


        :param grunt_task_id: The grunt_task_id of this GruntTaskOption.  # noqa: E501
        :type: int
        """

        self._grunt_task_id = grunt_task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GruntTaskOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GruntTaskOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
