# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RuntimeIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    WIN_X64 = "win_x64"
    WIN_X86 = "win_x86"
    WIN_ARM = "win_arm"
    WIN_ARM64 = "win_arm64"
    WIN7_X64 = "win7_x64"
    WIN7_X86 = "win7_x86"
    WIN81_X64 = "win81_x64"
    WIN81_X86 = "win81_x86"
    WIN81_ARM = "win81_arm"
    WIN10_X64 = "win10_x64"
    WIN10_X86 = "win10_x86"
    WIN10_ARM = "win10_arm"
    WIN10_ARM64 = "win10_arm64"
    LINUX_X64 = "linux_x64"
    LINUX_MUSL_X64 = "linux_musl_x64"
    LINUX_ARM = "linux_arm"
    LINUX_ARM64 = "linux_arm64"
    RHEL_X64 = "rhel_x64"
    RHEL_6_X64 = "rhel_6_x64"
    TIZEN = "tizen"
    TIZEN_4_0_0 = "tizen_4_0_0"
    TIZEN_5_0_0 = "tizen_5_0_0"
    OSX_X64 = "osx_x64"
    OSX_10_10_X64 = "osx_10_10_x64"
    OSX_10_11_X64 = "osx_10_11_x64"
    OSX_10_12_X64 = "osx_10_12_x64"
    OSX_10_13_X64 = "osx_10_13_x64"
    OSX_10_14_X64 = "osx_10_14_x64"
    OSX_10_15_X64 = "osx_10_15_x64"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """RuntimeIdentifier - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuntimeIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
