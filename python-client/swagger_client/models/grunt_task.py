# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GruntTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'author_id': 'int',
        'author': 'GruntTaskAuthor',
        'name': 'str',
        'aliases': 'list[str]',
        'description': 'str',
        'help': 'str',
        'language': 'ImplantLanguage',
        'compatible_dot_net_versions': 'list[DotNetVersion]',
        'code': 'str',
        'compiled': 'bool',
        'tasking_type': 'GruntTaskingType',
        'reference_source_libraries': 'list[ReferenceSourceLibrary]',
        'reference_assemblies': 'list[ReferenceAssembly]',
        'embedded_resources': 'list[EmbeddedResource]',
        'unsafe_compile': 'bool',
        'token_task': 'bool',
        'options': 'list[GruntTaskOption]'
    }

    attribute_map = {
        'id': 'id',
        'author_id': 'authorId',
        'author': 'author',
        'name': 'name',
        'aliases': 'aliases',
        'description': 'description',
        'help': 'help',
        'language': 'language',
        'compatible_dot_net_versions': 'compatibleDotNetVersions',
        'code': 'code',
        'compiled': 'compiled',
        'tasking_type': 'taskingType',
        'reference_source_libraries': 'referenceSourceLibraries',
        'reference_assemblies': 'referenceAssemblies',
        'embedded_resources': 'embeddedResources',
        'unsafe_compile': 'unsafeCompile',
        'token_task': 'tokenTask',
        'options': 'options'
    }

    def __init__(self, id=None, author_id=None, author=None, name=None, aliases=None, description=None, help=None, language=None, compatible_dot_net_versions=None, code=None, compiled=None, tasking_type=None, reference_source_libraries=None, reference_assemblies=None, embedded_resources=None, unsafe_compile=None, token_task=None, options=None):  # noqa: E501
        """GruntTask - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._author_id = None
        self._author = None
        self._name = None
        self._aliases = None
        self._description = None
        self._help = None
        self._language = None
        self._compatible_dot_net_versions = None
        self._code = None
        self._compiled = None
        self._tasking_type = None
        self._reference_source_libraries = None
        self._reference_assemblies = None
        self._embedded_resources = None
        self._unsafe_compile = None
        self._token_task = None
        self._options = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if author_id is not None:
            self.author_id = author_id
        if author is not None:
            self.author = author
        self.name = name
        if aliases is not None:
            self.aliases = aliases
        if description is not None:
            self.description = description
        if help is not None:
            self.help = help
        if language is not None:
            self.language = language
        if compatible_dot_net_versions is not None:
            self.compatible_dot_net_versions = compatible_dot_net_versions
        if code is not None:
            self.code = code
        if compiled is not None:
            self.compiled = compiled
        if tasking_type is not None:
            self.tasking_type = tasking_type
        if reference_source_libraries is not None:
            self.reference_source_libraries = reference_source_libraries
        if reference_assemblies is not None:
            self.reference_assemblies = reference_assemblies
        if embedded_resources is not None:
            self.embedded_resources = embedded_resources
        if unsafe_compile is not None:
            self.unsafe_compile = unsafe_compile
        if token_task is not None:
            self.token_task = token_task
        if options is not None:
            self.options = options

    @property
    def id(self):
        """Gets the id of this GruntTask.  # noqa: E501


        :return: The id of this GruntTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GruntTask.


        :param id: The id of this GruntTask.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def author_id(self):
        """Gets the author_id of this GruntTask.  # noqa: E501


        :return: The author_id of this GruntTask.  # noqa: E501
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this GruntTask.


        :param author_id: The author_id of this GruntTask.  # noqa: E501
        :type: int
        """

        self._author_id = author_id

    @property
    def author(self):
        """Gets the author of this GruntTask.  # noqa: E501


        :return: The author of this GruntTask.  # noqa: E501
        :rtype: GruntTaskAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GruntTask.


        :param author: The author of this GruntTask.  # noqa: E501
        :type: GruntTaskAuthor
        """

        self._author = author

    @property
    def name(self):
        """Gets the name of this GruntTask.  # noqa: E501


        :return: The name of this GruntTask.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GruntTask.


        :param name: The name of this GruntTask.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def aliases(self):
        """Gets the aliases of this GruntTask.  # noqa: E501


        :return: The aliases of this GruntTask.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this GruntTask.


        :param aliases: The aliases of this GruntTask.  # noqa: E501
        :type: list[str]
        """

        self._aliases = aliases

    @property
    def description(self):
        """Gets the description of this GruntTask.  # noqa: E501


        :return: The description of this GruntTask.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GruntTask.


        :param description: The description of this GruntTask.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def help(self):
        """Gets the help of this GruntTask.  # noqa: E501


        :return: The help of this GruntTask.  # noqa: E501
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this GruntTask.


        :param help: The help of this GruntTask.  # noqa: E501
        :type: str
        """

        self._help = help

    @property
    def language(self):
        """Gets the language of this GruntTask.  # noqa: E501


        :return: The language of this GruntTask.  # noqa: E501
        :rtype: ImplantLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GruntTask.


        :param language: The language of this GruntTask.  # noqa: E501
        :type: ImplantLanguage
        """

        self._language = language

    @property
    def compatible_dot_net_versions(self):
        """Gets the compatible_dot_net_versions of this GruntTask.  # noqa: E501


        :return: The compatible_dot_net_versions of this GruntTask.  # noqa: E501
        :rtype: list[DotNetVersion]
        """
        return self._compatible_dot_net_versions

    @compatible_dot_net_versions.setter
    def compatible_dot_net_versions(self, compatible_dot_net_versions):
        """Sets the compatible_dot_net_versions of this GruntTask.


        :param compatible_dot_net_versions: The compatible_dot_net_versions of this GruntTask.  # noqa: E501
        :type: list[DotNetVersion]
        """

        self._compatible_dot_net_versions = compatible_dot_net_versions

    @property
    def code(self):
        """Gets the code of this GruntTask.  # noqa: E501


        :return: The code of this GruntTask.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GruntTask.


        :param code: The code of this GruntTask.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def compiled(self):
        """Gets the compiled of this GruntTask.  # noqa: E501


        :return: The compiled of this GruntTask.  # noqa: E501
        :rtype: bool
        """
        return self._compiled

    @compiled.setter
    def compiled(self, compiled):
        """Sets the compiled of this GruntTask.


        :param compiled: The compiled of this GruntTask.  # noqa: E501
        :type: bool
        """

        self._compiled = compiled

    @property
    def tasking_type(self):
        """Gets the tasking_type of this GruntTask.  # noqa: E501


        :return: The tasking_type of this GruntTask.  # noqa: E501
        :rtype: GruntTaskingType
        """
        return self._tasking_type

    @tasking_type.setter
    def tasking_type(self, tasking_type):
        """Sets the tasking_type of this GruntTask.


        :param tasking_type: The tasking_type of this GruntTask.  # noqa: E501
        :type: GruntTaskingType
        """

        self._tasking_type = tasking_type

    @property
    def reference_source_libraries(self):
        """Gets the reference_source_libraries of this GruntTask.  # noqa: E501


        :return: The reference_source_libraries of this GruntTask.  # noqa: E501
        :rtype: list[ReferenceSourceLibrary]
        """
        return self._reference_source_libraries

    @reference_source_libraries.setter
    def reference_source_libraries(self, reference_source_libraries):
        """Sets the reference_source_libraries of this GruntTask.


        :param reference_source_libraries: The reference_source_libraries of this GruntTask.  # noqa: E501
        :type: list[ReferenceSourceLibrary]
        """

        self._reference_source_libraries = reference_source_libraries

    @property
    def reference_assemblies(self):
        """Gets the reference_assemblies of this GruntTask.  # noqa: E501


        :return: The reference_assemblies of this GruntTask.  # noqa: E501
        :rtype: list[ReferenceAssembly]
        """
        return self._reference_assemblies

    @reference_assemblies.setter
    def reference_assemblies(self, reference_assemblies):
        """Sets the reference_assemblies of this GruntTask.


        :param reference_assemblies: The reference_assemblies of this GruntTask.  # noqa: E501
        :type: list[ReferenceAssembly]
        """

        self._reference_assemblies = reference_assemblies

    @property
    def embedded_resources(self):
        """Gets the embedded_resources of this GruntTask.  # noqa: E501


        :return: The embedded_resources of this GruntTask.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded_resources

    @embedded_resources.setter
    def embedded_resources(self, embedded_resources):
        """Sets the embedded_resources of this GruntTask.


        :param embedded_resources: The embedded_resources of this GruntTask.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded_resources = embedded_resources

    @property
    def unsafe_compile(self):
        """Gets the unsafe_compile of this GruntTask.  # noqa: E501


        :return: The unsafe_compile of this GruntTask.  # noqa: E501
        :rtype: bool
        """
        return self._unsafe_compile

    @unsafe_compile.setter
    def unsafe_compile(self, unsafe_compile):
        """Sets the unsafe_compile of this GruntTask.


        :param unsafe_compile: The unsafe_compile of this GruntTask.  # noqa: E501
        :type: bool
        """

        self._unsafe_compile = unsafe_compile

    @property
    def token_task(self):
        """Gets the token_task of this GruntTask.  # noqa: E501


        :return: The token_task of this GruntTask.  # noqa: E501
        :rtype: bool
        """
        return self._token_task

    @token_task.setter
    def token_task(self, token_task):
        """Sets the token_task of this GruntTask.


        :param token_task: The token_task of this GruntTask.  # noqa: E501
        :type: bool
        """

        self._token_task = token_task

    @property
    def options(self):
        """Gets the options of this GruntTask.  # noqa: E501


        :return: The options of this GruntTask.  # noqa: E501
        :rtype: list[GruntTaskOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this GruntTask.


        :param options: The options of this GruntTask.  # noqa: E501
        :type: list[GruntTaskOption]
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GruntTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GruntTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
