# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GruntTasking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'grunt_id': 'int',
        'grunt': 'Grunt',
        'grunt_task_id': 'int',
        'grunt_task': 'GruntTask',
        'type': 'GruntTaskingType',
        'parameters': 'list[str]',
        'status': 'GruntTaskingStatus',
        'tasking_time': 'datetime',
        'completion_time': 'datetime',
        'grunt_command_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'grunt_id': 'gruntId',
        'grunt': 'grunt',
        'grunt_task_id': 'gruntTaskId',
        'grunt_task': 'gruntTask',
        'type': 'type',
        'parameters': 'parameters',
        'status': 'status',
        'tasking_time': 'taskingTime',
        'completion_time': 'completionTime',
        'grunt_command_id': 'gruntCommandId'
    }

    def __init__(self, id=None, name=None, grunt_id=None, grunt=None, grunt_task_id=None, grunt_task=None, type=None, parameters=None, status=None, tasking_time=None, completion_time=None, grunt_command_id=None):  # noqa: E501
        """GruntTasking - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._grunt_id = None
        self._grunt = None
        self._grunt_task_id = None
        self._grunt_task = None
        self._type = None
        self._parameters = None
        self._status = None
        self._tasking_time = None
        self._completion_time = None
        self._grunt_command_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.grunt_id = grunt_id
        if grunt is not None:
            self.grunt = grunt
        self.grunt_task_id = grunt_task_id
        if grunt_task is not None:
            self.grunt_task = grunt_task
        if type is not None:
            self.type = type
        if parameters is not None:
            self.parameters = parameters
        if status is not None:
            self.status = status
        if tasking_time is not None:
            self.tasking_time = tasking_time
        if completion_time is not None:
            self.completion_time = completion_time
        if grunt_command_id is not None:
            self.grunt_command_id = grunt_command_id

    @property
    def id(self):
        """Gets the id of this GruntTasking.  # noqa: E501


        :return: The id of this GruntTasking.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GruntTasking.


        :param id: The id of this GruntTasking.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GruntTasking.  # noqa: E501


        :return: The name of this GruntTasking.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GruntTasking.


        :param name: The name of this GruntTasking.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def grunt_id(self):
        """Gets the grunt_id of this GruntTasking.  # noqa: E501


        :return: The grunt_id of this GruntTasking.  # noqa: E501
        :rtype: int
        """
        return self._grunt_id

    @grunt_id.setter
    def grunt_id(self, grunt_id):
        """Sets the grunt_id of this GruntTasking.


        :param grunt_id: The grunt_id of this GruntTasking.  # noqa: E501
        :type: int
        """
        if grunt_id is None:
            raise ValueError("Invalid value for `grunt_id`, must not be `None`")  # noqa: E501

        self._grunt_id = grunt_id

    @property
    def grunt(self):
        """Gets the grunt of this GruntTasking.  # noqa: E501


        :return: The grunt of this GruntTasking.  # noqa: E501
        :rtype: Grunt
        """
        return self._grunt

    @grunt.setter
    def grunt(self, grunt):
        """Sets the grunt of this GruntTasking.


        :param grunt: The grunt of this GruntTasking.  # noqa: E501
        :type: Grunt
        """

        self._grunt = grunt

    @property
    def grunt_task_id(self):
        """Gets the grunt_task_id of this GruntTasking.  # noqa: E501


        :return: The grunt_task_id of this GruntTasking.  # noqa: E501
        :rtype: int
        """
        return self._grunt_task_id

    @grunt_task_id.setter
    def grunt_task_id(self, grunt_task_id):
        """Sets the grunt_task_id of this GruntTasking.


        :param grunt_task_id: The grunt_task_id of this GruntTasking.  # noqa: E501
        :type: int
        """
        if grunt_task_id is None:
            raise ValueError("Invalid value for `grunt_task_id`, must not be `None`")  # noqa: E501

        self._grunt_task_id = grunt_task_id

    @property
    def grunt_task(self):
        """Gets the grunt_task of this GruntTasking.  # noqa: E501


        :return: The grunt_task of this GruntTasking.  # noqa: E501
        :rtype: GruntTask
        """
        return self._grunt_task

    @grunt_task.setter
    def grunt_task(self, grunt_task):
        """Sets the grunt_task of this GruntTasking.


        :param grunt_task: The grunt_task of this GruntTasking.  # noqa: E501
        :type: GruntTask
        """

        self._grunt_task = grunt_task

    @property
    def type(self):
        """Gets the type of this GruntTasking.  # noqa: E501


        :return: The type of this GruntTasking.  # noqa: E501
        :rtype: GruntTaskingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GruntTasking.


        :param type: The type of this GruntTasking.  # noqa: E501
        :type: GruntTaskingType
        """

        self._type = type

    @property
    def parameters(self):
        """Gets the parameters of this GruntTasking.  # noqa: E501


        :return: The parameters of this GruntTasking.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GruntTasking.


        :param parameters: The parameters of this GruntTasking.  # noqa: E501
        :type: list[str]
        """

        self._parameters = parameters

    @property
    def status(self):
        """Gets the status of this GruntTasking.  # noqa: E501


        :return: The status of this GruntTasking.  # noqa: E501
        :rtype: GruntTaskingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GruntTasking.


        :param status: The status of this GruntTasking.  # noqa: E501
        :type: GruntTaskingStatus
        """

        self._status = status

    @property
    def tasking_time(self):
        """Gets the tasking_time of this GruntTasking.  # noqa: E501


        :return: The tasking_time of this GruntTasking.  # noqa: E501
        :rtype: datetime
        """
        return self._tasking_time

    @tasking_time.setter
    def tasking_time(self, tasking_time):
        """Sets the tasking_time of this GruntTasking.


        :param tasking_time: The tasking_time of this GruntTasking.  # noqa: E501
        :type: datetime
        """

        self._tasking_time = tasking_time

    @property
    def completion_time(self):
        """Gets the completion_time of this GruntTasking.  # noqa: E501


        :return: The completion_time of this GruntTasking.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this GruntTasking.


        :param completion_time: The completion_time of this GruntTasking.  # noqa: E501
        :type: datetime
        """

        self._completion_time = completion_time

    @property
    def grunt_command_id(self):
        """Gets the grunt_command_id of this GruntTasking.  # noqa: E501


        :return: The grunt_command_id of this GruntTasking.  # noqa: E501
        :rtype: int
        """
        return self._grunt_command_id

    @grunt_command_id.setter
    def grunt_command_id(self, grunt_command_id):
        """Sets the grunt_command_id of this GruntTasking.


        :param grunt_command_id: The grunt_command_id of this GruntTasking.  # noqa: E501
        :type: int
        """

        self._grunt_command_id = grunt_command_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GruntTasking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GruntTasking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
