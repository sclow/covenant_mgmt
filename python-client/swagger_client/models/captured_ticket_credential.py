# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CapturedTicketCredential(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_credential_type': 'TicketType',
        'service_name': 'str',
        'ticket': 'str',
        'id': 'int',
        'type': 'CredentialType',
        'domain': 'str',
        'username': 'str'
    }

    attribute_map = {
        'ticket_credential_type': 'ticketCredentialType',
        'service_name': 'serviceName',
        'ticket': 'ticket',
        'id': 'id',
        'type': 'type',
        'domain': 'domain',
        'username': 'username'
    }

    def __init__(self, ticket_credential_type=None, service_name=None, ticket=None, id=None, type=None, domain=None, username=None):  # noqa: E501
        """CapturedTicketCredential - a model defined in Swagger"""  # noqa: E501

        self._ticket_credential_type = None
        self._service_name = None
        self._ticket = None
        self._id = None
        self._type = None
        self._domain = None
        self._username = None
        self.discriminator = None

        if ticket_credential_type is not None:
            self.ticket_credential_type = ticket_credential_type
        if service_name is not None:
            self.service_name = service_name
        if ticket is not None:
            self.ticket = ticket
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if domain is not None:
            self.domain = domain
        if username is not None:
            self.username = username

    @property
    def ticket_credential_type(self):
        """Gets the ticket_credential_type of this CapturedTicketCredential.  # noqa: E501


        :return: The ticket_credential_type of this CapturedTicketCredential.  # noqa: E501
        :rtype: TicketType
        """
        return self._ticket_credential_type

    @ticket_credential_type.setter
    def ticket_credential_type(self, ticket_credential_type):
        """Sets the ticket_credential_type of this CapturedTicketCredential.


        :param ticket_credential_type: The ticket_credential_type of this CapturedTicketCredential.  # noqa: E501
        :type: TicketType
        """

        self._ticket_credential_type = ticket_credential_type

    @property
    def service_name(self):
        """Gets the service_name of this CapturedTicketCredential.  # noqa: E501


        :return: The service_name of this CapturedTicketCredential.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this CapturedTicketCredential.


        :param service_name: The service_name of this CapturedTicketCredential.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def ticket(self):
        """Gets the ticket of this CapturedTicketCredential.  # noqa: E501


        :return: The ticket of this CapturedTicketCredential.  # noqa: E501
        :rtype: str
        """
        return self._ticket

    @ticket.setter
    def ticket(self, ticket):
        """Sets the ticket of this CapturedTicketCredential.


        :param ticket: The ticket of this CapturedTicketCredential.  # noqa: E501
        :type: str
        """

        self._ticket = ticket

    @property
    def id(self):
        """Gets the id of this CapturedTicketCredential.  # noqa: E501


        :return: The id of this CapturedTicketCredential.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CapturedTicketCredential.


        :param id: The id of this CapturedTicketCredential.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CapturedTicketCredential.  # noqa: E501


        :return: The type of this CapturedTicketCredential.  # noqa: E501
        :rtype: CredentialType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CapturedTicketCredential.


        :param type: The type of this CapturedTicketCredential.  # noqa: E501
        :type: CredentialType
        """

        self._type = type

    @property
    def domain(self):
        """Gets the domain of this CapturedTicketCredential.  # noqa: E501


        :return: The domain of this CapturedTicketCredential.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CapturedTicketCredential.


        :param domain: The domain of this CapturedTicketCredential.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def username(self):
        """Gets the username of this CapturedTicketCredential.  # noqa: E501


        :return: The username of this CapturedTicketCredential.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CapturedTicketCredential.


        :param username: The username of this CapturedTicketCredential.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CapturedTicketCredential, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapturedTicketCredential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
