# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NetworkIndicator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'domain': 'str',
        'ip_address': 'str',
        'port': 'int',
        'uri': 'str',
        'id': 'int',
        'type': 'IndicatorType'
    }

    attribute_map = {
        'protocol': 'protocol',
        'domain': 'domain',
        'ip_address': 'ipAddress',
        'port': 'port',
        'uri': 'uri',
        'id': 'id',
        'type': 'type'
    }

    def __init__(self, protocol=None, domain=None, ip_address=None, port=None, uri=None, id=None, type=None):  # noqa: E501
        """NetworkIndicator - a model defined in Swagger"""  # noqa: E501

        self._protocol = None
        self._domain = None
        self._ip_address = None
        self._port = None
        self._uri = None
        self._id = None
        self._type = None
        self.discriminator = None

        if protocol is not None:
            self.protocol = protocol
        if domain is not None:
            self.domain = domain
        if ip_address is not None:
            self.ip_address = ip_address
        if port is not None:
            self.port = port
        if uri is not None:
            self.uri = uri
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type

    @property
    def protocol(self):
        """Gets the protocol of this NetworkIndicator.  # noqa: E501


        :return: The protocol of this NetworkIndicator.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this NetworkIndicator.


        :param protocol: The protocol of this NetworkIndicator.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def domain(self):
        """Gets the domain of this NetworkIndicator.  # noqa: E501


        :return: The domain of this NetworkIndicator.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this NetworkIndicator.


        :param domain: The domain of this NetworkIndicator.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def ip_address(self):
        """Gets the ip_address of this NetworkIndicator.  # noqa: E501


        :return: The ip_address of this NetworkIndicator.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NetworkIndicator.


        :param ip_address: The ip_address of this NetworkIndicator.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this NetworkIndicator.  # noqa: E501


        :return: The port of this NetworkIndicator.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NetworkIndicator.


        :param port: The port of this NetworkIndicator.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def uri(self):
        """Gets the uri of this NetworkIndicator.  # noqa: E501


        :return: The uri of this NetworkIndicator.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this NetworkIndicator.


        :param uri: The uri of this NetworkIndicator.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def id(self):
        """Gets the id of this NetworkIndicator.  # noqa: E501


        :return: The id of this NetworkIndicator.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkIndicator.


        :param id: The id of this NetworkIndicator.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this NetworkIndicator.  # noqa: E501


        :return: The type of this NetworkIndicator.  # noqa: E501
        :rtype: IndicatorType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkIndicator.


        :param type: The type of this NetworkIndicator.  # noqa: E501
        :type: IndicatorType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkIndicator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkIndicator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
