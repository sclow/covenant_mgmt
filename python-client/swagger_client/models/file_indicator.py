# coding: utf-8

"""
    Covenant API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FileIndicator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'file_path': 'str',
        'sh_a2': 'str',
        'sh_a1': 'str',
        'm_d5': 'str',
        'id': 'int',
        'type': 'IndicatorType'
    }

    attribute_map = {
        'file_name': 'fileName',
        'file_path': 'filePath',
        'sh_a2': 'shA2',
        'sh_a1': 'shA1',
        'm_d5': 'mD5',
        'id': 'id',
        'type': 'type'
    }

    def __init__(self, file_name=None, file_path=None, sh_a2=None, sh_a1=None, m_d5=None, id=None, type=None):  # noqa: E501
        """FileIndicator - a model defined in Swagger"""  # noqa: E501

        self._file_name = None
        self._file_path = None
        self._sh_a2 = None
        self._sh_a1 = None
        self._m_d5 = None
        self._id = None
        self._type = None
        self.discriminator = None

        if file_name is not None:
            self.file_name = file_name
        if file_path is not None:
            self.file_path = file_path
        if sh_a2 is not None:
            self.sh_a2 = sh_a2
        if sh_a1 is not None:
            self.sh_a1 = sh_a1
        if m_d5 is not None:
            self.m_d5 = m_d5
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type

    @property
    def file_name(self):
        """Gets the file_name of this FileIndicator.  # noqa: E501


        :return: The file_name of this FileIndicator.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FileIndicator.


        :param file_name: The file_name of this FileIndicator.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_path(self):
        """Gets the file_path of this FileIndicator.  # noqa: E501


        :return: The file_path of this FileIndicator.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this FileIndicator.


        :param file_path: The file_path of this FileIndicator.  # noqa: E501
        :type: str
        """

        self._file_path = file_path

    @property
    def sh_a2(self):
        """Gets the sh_a2 of this FileIndicator.  # noqa: E501


        :return: The sh_a2 of this FileIndicator.  # noqa: E501
        :rtype: str
        """
        return self._sh_a2

    @sh_a2.setter
    def sh_a2(self, sh_a2):
        """Sets the sh_a2 of this FileIndicator.


        :param sh_a2: The sh_a2 of this FileIndicator.  # noqa: E501
        :type: str
        """

        self._sh_a2 = sh_a2

    @property
    def sh_a1(self):
        """Gets the sh_a1 of this FileIndicator.  # noqa: E501


        :return: The sh_a1 of this FileIndicator.  # noqa: E501
        :rtype: str
        """
        return self._sh_a1

    @sh_a1.setter
    def sh_a1(self, sh_a1):
        """Sets the sh_a1 of this FileIndicator.


        :param sh_a1: The sh_a1 of this FileIndicator.  # noqa: E501
        :type: str
        """

        self._sh_a1 = sh_a1

    @property
    def m_d5(self):
        """Gets the m_d5 of this FileIndicator.  # noqa: E501


        :return: The m_d5 of this FileIndicator.  # noqa: E501
        :rtype: str
        """
        return self._m_d5

    @m_d5.setter
    def m_d5(self, m_d5):
        """Sets the m_d5 of this FileIndicator.


        :param m_d5: The m_d5 of this FileIndicator.  # noqa: E501
        :type: str
        """

        self._m_d5 = m_d5

    @property
    def id(self):
        """Gets the id of this FileIndicator.  # noqa: E501


        :return: The id of this FileIndicator.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileIndicator.


        :param id: The id of this FileIndicator.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this FileIndicator.  # noqa: E501


        :return: The type of this FileIndicator.  # noqa: E501
        :rtype: IndicatorType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FileIndicator.


        :param type: The type of this FileIndicator.  # noqa: E501
        :type: IndicatorType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileIndicator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileIndicator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
